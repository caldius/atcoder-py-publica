{
  // Place your ac-py ワークスペース snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "複数行の入力 ⇒ 全部intの二次元配列": {
    "scope": "python",
    "prefix": "sni_to_all_int_matrix",
    "body": ["[list(map(int, x.split())) for x in case.splitlines()]"],
    "description": "複数行の入力 ⇒ 全部intの二次元配列"
  },
  "1行の入力 ⇒ int配列": {
    "scope": "python",
    "prefix": "sni_to_all_int_1_row",
    "body": ["list(map(int, case.split()))"],
    "description": "1行の入力 ⇒ int配列"
  },
  "素因数分解": {
    "scope": "python",
    "prefix": "sni_factorization",
    "body": [
      "# 素因数分解",
      "def factorization(n: int) -> list[list[int]]:",
      "    arr: list[list[int]] = []",
      "    temp = n",
      "    for i in range(2, int(-(-(n**0.5) // 1)) + 1):",
      "        if temp % i == 0:",
      "            cnt = 0",
      "            while temp % i == 0:",
      "                cnt += 1",
      "                temp //= i",
      "            arr.append([i, cnt])",
      "    if temp != 1:",
      "        arr.append([temp, 1])",
      "    if arr == []:",
      "        arr.append([n, 1])",
      "    return arr",
      ""
    ],
    "description": "素因数分解"
  },
  "シンプル内包表記X": {
    "scope": "python",
    "prefix": "sni_xforxin",
    "body": ["[x for x in $1]"],
    "description": "シンプル内包表記X"
  },
  "シンプル内包表記Y": {
    "scope": "python",
    "prefix": "sni_yforyin",
    "body": ["[y for y in $1]"],
    "description": "シンプル内包表記Y"
  },
  "シンプル内包表記Z": {
    "scope": "python",
    "prefix": "sni_zforzin",
    "body": ["[z for z in $1]"],
    "description": "シンプル内包表記Z"
  },
  "配列間の差を取得(N-1の配列を返す)": {
    "scope": "python",
    "prefix": "sni_slide_diff_list",
    "body": ["[right - left for left, right in zip(tgtlist, tgtlist[1:])]"],
    "description": "配列間の差を取得"
  },
  "print Yes": {
    "scope": "python",
    "prefix": "sni_print_Yes",
    "body": ["print(\"Yes\")"],
    "description": "print Yes"
  },
  "print No": {
    "scope": "python",
    "prefix": "sni_print_No",
    "body": ["print(\"No\")"],
    "description": "print No"
  },
  "print Yes No": {
    "scope": "python",
    "prefix": "sni_print_YN",
    "body": ["print(\"Yes\") if cond else print(\"No\")"],
    "description": "print YesNo"
  },

  "print result": {
    "scope": "python",
    "prefix": "sni_print_result",
    "body": ["print(result)"],
    "description": "print result"
  },
  "デバッグ用の入力文字列設定": {
    "scope": "python",
    "prefix": "sni_debug_input",
    "body": ["from textwrap import dedent", "", "case = dedent(", "    \"\"\"", "8888", "    \"\"\"", ").strip()"],
    "description": "素因数分解"
  },
  "等差数列の和1": {
    "scope": "python",
    "prefix": "sni_tosa_suretu1",
    "body": ["sum(range(lower, upper))"],
    "description": "等差数列"
  },
  "等差数列の和2": {
    "scope": "python",
    "prefix": "sni_tosa_suretu2",
    "body": ["(count * (2 * start + (count - 1) * diff)) / 2"],
    "description": "等差数列"
  },
  "等差数列の和3": {
    "scope": "python",
    "prefix": "sni_tosa_suretu3",
    "body": ["(start + stop) * (count / 2)"],
    "description": "等差数列"
  },
  "壁作成": {
    "scope": "python",
    "prefix": "sni_create_wall",
    "body": [
      "def createWall(matrix: list[list[str]], H: int, W: int, wall: str) -> list[list[str]]:",
      "  return [[wall] * (W + 2)] + [[wall] + x + [wall] for x in matrix] + [[wall] * (W + 2)]"
    ],
    "description": "文字列マトリックスに指定した文字を壁として囲った新しいマトリックスを返す"
  },
  "UnionFindクラス": {
    "scope": "python",
    "prefix": "sni_union_find",
    "body": [
      "class UnionFind:",
      "    def __init__(self, n: int):",
      "        self.n = n",
      "        self.parents = [-1] * n",
      "",
      "    def find(self, x: int):",
      "        if self.parents[x] < 0:",
      "            return x",
      "        else:",
      "            self.parents[x] = self.find(self.parents[x])",
      "            return self.parents[x]",
      "",
      "    def union(self, x: int, y: int):",
      "        x = self.find(x)",
      "        y = self.find(y)",
      "",
      "        if x == y:",
      "            return",
      "",
      "        if self.parents[x] > self.parents[y]:",
      "            x, y = y, x",
      "",
      "        self.parents[x] += self.parents[y]",
      "        self.parents[y] = x",
      "",
      "    def size(self, x: int):",
      "        return -self.parents[self.find(x)]",
      "",
      "    def same(self, x: int, y: int):",
      "        return self.find(x) == self.find(y)",
      "",
      "    def members(self, x: int):",
      "        root = self.find(x)",
      "        return [i for i in range(self.n) if self.find(i) == root]",
      "",
      "    def roots(self):",
      "        return [i for i, x in enumerate(self.parents) if x < 0]",
      "",
      "    def group_count(self):",
      "        return len(self.roots())",
      "",
      "    def all_group_members(self):",
      "        group_members = collections.defaultdict(list)",
      "        for member in range(self.n):",
      "            group_members[self.find(member)].append(member)",
      "        return group_members",
      "",
      "    def __str__(self):",
      "        return '\\n'.join(f\"{r}: {m}\" for r, m in self.all_group_members().items())",
      ""
    ],
    "description": "UnionFindクラス"
  }
}
